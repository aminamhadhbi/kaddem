pipeline {
    agent any
    environment {
    registry = "aminamhadhbi/kaddem7"
    registryCredential = 'dockerHub'
    dockerImage = ''
    DOCKER_COMPOSE_FILE = 'docker-compose.yml'

    }
    stages {
        stage('Checkout') {
            steps {
                // Récupérer le code depuis le référentiel Git
                git 'https://github.com/aminamhadhbi/kaddem.git'
            }
        }
stage('Generate docker-compose.yml') {
            steps {
                script {
                    // Define your docker-compose content dynamically
                    def dockerComposeContent = """
                    version: '3'
                    services:
                      spring-app:
                        image: your-spring-app-image:latest
                        ports:
                          - "9090:9090"
                        environment:
                          - spring.datasource.url=jdbc:mysql://mysql-db:3306/kaddemProject?createDatabaseIfNotExist=true
                          - spring.datasource.username=root
                          - spring.datasource.password=root_password
                          - spring.jpa.show-sql=true
                          - spring.jpa.hibernate.ddl-auto=update
                          - logging.file.path=/var/log/Gestion-Facture-LogFile
                          - logging.file.max-size=10MB
                          - logging.level.root=info
                          - spring.mvc.format.date=yyyy-MM-dd
                        depends_on:
                          - mysql-db

                      mysql-db:
                        image: mysql:latest
                        ports:
                          - "3306:3306"
                        environment:
                          MYSQL_ROOT_PASSWORD: root_password
                          MYSQL_DATABASE: kaddemProject
                        volumes:
                          - mysql-data:/var/lib/mysql
                      """
                    
                    // Write the docker-compose content to a temporary file
                    writeFile file: 'docker-compose.yml', text: dockerComposeContent
                }
            }
        }
        stage('Start Containers') {
            steps {
                // Run docker-compose using the generated docker-compose.yml
                sh 'docker-compose up -d'
            }
        }
 stage('Maven Clean') {
            steps {
                // Nettoyer le projet (mvn clean)
                sh 'mvn clean'
            }
        }

        stage('Maven Compile') {
            steps {
                // Compiler le projet (mvn compile)
                sh 'mvn compile'
            }
        }
  
     stage("Deploy With Nexus") {
            steps {
              sh 'mvn clean deploy -DskipTests -Durl=http://192.168.33.10:8081/repository/maven-releases/'
            }
     }



    stage('SonarQube Analysis') {
            steps {
                    sh 'mvn sonar:sonar -Dsonar.login=admin -Dsonar.password=admin'
                }
          
        }
   stage('Build Artifact') {
            steps {
           //    Run Maven clean and package commands to build the .jar file.
                sh 'mvn clean package -DskipTests'
            }
        }
 stage('Building our image') {
            steps{
                 script {
                   dockerImage = docker.build registry + ":$BUILD_NUMBER"
                 }
            }
       }
stage('Deploy our image') {
             steps {   script {
                    docker.withRegistry('', registryCredential) {
                     dockerImage.push()
                                  }
                     }
            }
       }
    }
}

